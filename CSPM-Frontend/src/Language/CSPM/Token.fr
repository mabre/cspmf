{--
    This module contains the data type Tokens and some helper functions
    [Module]     Language.CSPM.Token
    [Copyright]  (c) Fontaine 2008
    [License]    BSD
    
    [Maintainer] Fontaine@cs.uni-duesseldorf.de
    [Stability]  provisional
-}

module Language.CSPM.Token
where

import Language.CSPM.TokenClasses
import Language.CSPM.Token__LexError public

import Data.Data

{-# derive DataTypeable #-}
data TokenId = TokenId {unTokenId :: Int}
derive Show TokenId
derive Eq TokenId
derive Ord TokenId

mkTokenId :: Int -> TokenId
mkTokenId = TokenId

pprintAlexPosn :: AlexPosn -> String
pprintAlexPosn (AlexPn _p l c) = "Line: "++show l++" Col: "++show c

alexStartPos :: AlexPosn
alexStartPos = AlexPn 0 1 1

alexMove :: AlexPosn -> Char -> AlexPosn
alexMove (AlexPn a l _c) '\n' = AlexPn (a+1) (l+1)   1
alexMove (AlexPn a l  c) _    = AlexPn (a+1)  l     (c+1)

data LexErrorException = pure native frege.language.CSPM.LexErrorException where
    pure native new new         :: LexError -> LexErrorException
    pure native get getLexError :: LexErrorException -> LexError
derive Exceptional LexErrorException

{-# derive DataTypeable #-}
data Token = Token
  { tokenId     :: TokenId
  , tokenStart  :: AlexPosn
  , tokenLen    :: Int
  , tokenClass  :: PrimToken
  , tokenString :: String
  }
derive Show Token
derive Eq Token
derive Ord Token

tokenSentinel :: Token
tokenSentinel = Token
  { tokenId = mkTokenId (- 1)
  , tokenStart = AlexPn 0 0 0
  , tokenLen = 0
  , tokenClass  = error "CSPLexer.x illegal access tokenSentinel"
  , tokenString = error "CSPLexer.x illegal access tokenSentinel"}

showPosn :: AlexPosn -> String
showPosn (AlexPn _ line col) = show line ++ ":" ++ show col

showToken :: Token -> String
showToken Token {tokenString = str} = "'" ++ str ++ "'"
